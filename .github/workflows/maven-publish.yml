name: CI & CD for SpringApp
# events on which pipeline will run
on: 
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]
  workflow_dispatch:
    inputs:
      parameter_name:
        description: 'manually running jobs'
        required: true
env:
     MY_SQL_ROOT: ${{ secrets.MY_SQL_ROOT_PASSWORD }}
     MYSQL_USER: ${{ secrets.MYSQL_USER }}
     MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
     MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
     RUN_NUMBER: ${{ github.run_number }} 
     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL}}
     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL}}
     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
     JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
     AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     
jobs:

# Building SpringBoot application, caching dependencies to improve workflow execution time.
# Maximum allowed caching per repository: 10GB

  build-java:
    runs-on: 'self-hosted'

    steps:
    - name: repository checkout
      uses: actions/checkout@v3

    - name: java setup
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '8'

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: '3.8.2'

    - name: build with maven
      run: cd ./springboot-backend ; mvn clean install -DskipTests=true
    
    - name: cache for springapp
      uses: actions/cache@v3
      id: cache
      with:
       path: ~/.m2
       key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
       restore-keys:  ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
       lookup-only: true
       
    - name: Debug Cache
      run: |
       echo "Cache Key: ${{ runner.os }}-${{ env.cache_key }}"
       echo "Cache Directory Contents:"
       ls -al ~/.m2
      env:
       cache_key: Linux-
    
    - name: docker stage + spring app
      run: |
              cd ./springboot-backend
              docker build -t akshaykamthe651/github_actions_angular_java_mysql:${RUN_NUMBER}  .
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              docker push  akshaykamthe651/github_actions_angular_java_mysql:${RUN_NUMBER}  
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
          image-ref: 'akshaykamthe651/github_actions_angular_java_mysql:${RUN_NUMBER}'
          format: template
          template: "@/contrib/html.tpl"
          output: trivy-report.html
          
    - name: Archive code coverage results
      uses: actions/upload-artifact@v3
      with:
          name: github-pages
          path: trivy-report.html
          
# SonarQube analysis using SonarQube Actions 
  SonarQube-analysis:
      runs-on: 'self-hosted'
      needs: [ 'build-java']
      steps:
        - name: SonarQube Scan
          uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  Deployment-stage:
     runs-on: 'self-hosted'
     needs: [ 'build-java', 'SonarQube-analysis' ]
     steps:
        - name: AWS CLI install
          run: |
             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
             unzip awscliv2.zip
             sudo ./aws/install
             /usr/local/bin/aws --version
             echo "aws cli installed"
  
  # Configure AWS credentials
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: us-east-1

  #Github Integration with slack channel      
  Slack-notification:
      runs-on: 'self-hosted'
      needs: ['build-java','SonarQube-analysis']
      steps:
        - name: Slack Notification
          uses: act10ns/slack@v1
          with:
            steps:  ${{toJson(steps)}}
            channel: '#github_actions_notification'
            slack-message: "Springboot application build result is: ${{ job.status }}"
            if: always()
          env:
           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
